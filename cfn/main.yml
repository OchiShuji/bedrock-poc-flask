AWSTemplateFormatVersion: 2010-09-09
Description: Flask Applicattion Deployment Environment

Parameters:
  ServiceName:
    Type: String
    Default: bedrock-poc-flaskr
    Description: Name of the service
  PrefixListId:
    Type: String
    Default: pl-0f1765f9b4e2f2171

Resources:
# =====DynamoDB====
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref ServiceName
      AttributeDefinitions:
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: model_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: timestamp
          KeyType: HASH
        - AttributeName: model_id
          KeyType: RANGE
      Tags:
        - Key: service
          Value: !Ref ServiceName

# =====VPC=====
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.50.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: service
          Value: !Ref ServiceName
  
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.50.1.0/24
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref VPC
      Tags:
        - Key: service
          Value: !Ref ServiceName
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.50.2.0/24
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref VPC
      Tags:
        - Key: service
          Value: !Ref ServiceName

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw
        - Key: service
          Value: !Ref ServiceName
  
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public
        - Key: service
          Value: !Ref ServiceName
    
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGW
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
    
  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

# =====ECR=====
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: true
      RepositoryName: !Sub ${ServiceName}
      Tags:
        - Key: service
          Value: !Ref ServiceName

# =====Security Group======
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: !Sub ${AWS::StackName}-sg
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourcePrefixListId: !Ref PrefixListId
      Tags:
        - Key: service
          Value: !Ref ServiceName

# =====ECS=====
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ServiceName}
      Tags:
        - Key: service
          Value: !Ref ServiceName

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ServiceName}-cluster
      Tags:
        - Key: service
          Value: !Ref ServiceName

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ServiceName}-ecs-task-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: service
          Value: !Ref ServiceName
  
  ECSTaskRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:*
            Resource:
              Fn::GetAtt: DynamoDBTable.Arn
          - Effect: Allow
            Action:
              - bedrock:InvokeModel*
            Resource: "*"
      PolicyName: !Sub ${ServiceName}-ecs-task-policy
      Roles:
        - !Ref ECSTaskRole

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image:
            Fn::GetAtt: ECRRepository.RepositoryUri
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /ecs/${ServiceName}
              awslogs-region: ap-northeast-1
              awslogs-stream-prefix: !Ref ServiceName
      ExecutionRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole
      TaskRoleArn:
        Fn::GetAtt: ECSTaskRole.Arn
      Family: !Ref ServiceName
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      Tags:
        - Key: service
          Value: !Ref ServiceName

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Sub ${ServiceName}-service
      DesiredCount: 1
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::GetAtt: SecurityGroup.GroupId
          Subnets:
            - !Ref PublicSubnet
            - !Ref PublicSubnet2
      Tags:
        - Key: service
          Value: !Ref ServiceName

Outputs:
  DynamoDBTable:
    Value: !Ref DynamoDBTable
    Export:
      Name: !Sub ${AWS::StackName}-DynamoDBTable
